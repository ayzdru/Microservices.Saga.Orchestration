@page "/products"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject IApiGateway ApiGatewayClient
@inject PersistentComponentState ApplicationState
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
@implements IDisposable

<h3>Products</h3>

<button class="btn btn-primary" @onclick="ShowCreateModal">Create Product</button>
<button class="btn btn-success ms-2" @onclick="CreateOrder" disabled="@(!selectedProductIds.Any())">Create Order</button>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
<table class="table">
    <thead>
        <tr>
            <th></th>
            <th>Name</th>
            <th>Price</th>
            <th>Stock</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in products)
        {
            <tr>
                <td>
                    <input type="checkbox"
                           @bind="selectedProductIdsMap[product.Id]"
                           @bind:event="onchange" />
                </td>
                <td>@product.Name</td>
                <td>@product.Price</td>
                <td>@product.Stock</td>
                <td>
                    <button class="btn btn-sm btn-warning" @onclick="() => ShowEditModal(product)">Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteModal(product)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>
}

<!-- Create/Edit Modal -->
@if (isModalOpen)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <input class="form-control mb-2" placeholder="Name" @bind="modalProduct.Name" />
                    <input class="form-control mb-2" type="number" placeholder="Price" @bind="modalProduct.Price" />
                    <input class="form-control mb-2" type="number" placeholder="Stock" @bind="modalProduct.Stock" />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="SaveProduct">@modalActionText</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

<!-- Delete Modal -->
@if (isDeleteModalOpen)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Product</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete <strong>@deleteProduct?.Name</strong>?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button class="btn btn-danger" @onclick="DeleteProductConfirmed">Delete</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}
<!-- Success Modal -->
@if (isOrderSuccessModalOpen)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Order Sent</h5>
                    <button type="button" class="btn-close" @onclick="CloseOrderSuccessModal"></button>
                </div>
                <div class="modal-body">
                    <p>Your order has been sent successfully!</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="CloseOrderSuccessModal">OK</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

<!-- Error Modal -->
@if (isOrderErrorModalOpen)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-danger">Order Error</h5>
                    <button type="button" class="btn-close" @onclick="CloseOrderErrorModal"></button>
                </div>
                <div class="modal-body">
                    <p>@orderErrorMessage</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseOrderErrorModal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}
@code {

    private IEnumerable<Product>? products; 
    private PersistingComponentStateSubscription persistingSubscription;
    bool isModalOpen = false;
    bool isDeleteModalOpen = false;
    string modalTitle = "";
    string modalActionText = "";
    Product modalProduct = new();
    Product? deleteProduct;

    // Checkbox selection state
    private Dictionary<Guid, bool> selectedProductIdsMap = new();
    private List<Guid> selectedProductIds => selectedProductIdsMap.Where(x => x.Value).Select(x => x.Key).ToList();

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    async Task LoadProducts()
    {
        if (!ApplicationState.TryTakeFromJson<IEnumerable<Product>>(nameof(products), out var restoredData))
        {
            products = await ApiGatewayClient.GetProductsAsync();
        }
        else
        {
            products = restoredData!;
        }
        // Initialize checkbox map
        selectedProductIdsMap = products?.ToDictionary(p => p.Id, p => false) ?? new();
        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);
    }

    void ShowCreateModal()
    {
        modalTitle = "Create Product";
        modalActionText = "Create";
        modalProduct = new Product();
        isModalOpen = true;
    }

    void ShowEditModal(Product product)
    {
        modalTitle = "Edit Product";
        modalActionText = "Save";
        modalProduct = new Product
        {
            Id = product.Id,
            Name = product.Name,
            Price = product.Price,
            Stock = product.Stock
        };
        isModalOpen = true;
    }

    void CloseModal()
    {
        isModalOpen = false;
    }

    async Task SaveProduct()
    {
        if (modalProduct.Id == Guid.Empty)
        {
            // Create
            await ApiGatewayClient.CreateProductAsync(modalProduct);
        }
        else
        {
            // Edit
            await ApiGatewayClient.UpdateProductAsync(modalProduct);
        }
        await LoadProducts();
        isModalOpen = false;
    }

    void ShowDeleteModal(Product product)
    {
        deleteProduct = product;
        isDeleteModalOpen = true;
    }

    void CloseDeleteModal()
    {
        isDeleteModalOpen = false;
    }

    async Task DeleteProductConfirmed()
    {
        if (deleteProduct != null)
        {
            await ApiGatewayClient.DeleteProductAsync(deleteProduct.Id);
            await LoadProducts();
        }
        isDeleteModalOpen = false;
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(nameof(products), products);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose() => persistingSubscription.Dispose();
    bool isOrderSuccessModalOpen = false;
    bool isOrderErrorModalOpen = false;
    string orderErrorMessage = string.Empty;

    void CloseOrderSuccessModal()
    {
        isOrderSuccessModalOpen = false;
    }

    void CloseOrderErrorModal()
    {
        isOrderErrorModalOpen = false;
        orderErrorMessage = string.Empty;
    }
    // CreateOrder button handler
    async Task CreateOrder()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? user.FindFirst("sub")?.Value;

        if (string.IsNullOrEmpty(userId) || !selectedProductIds.Any())
            return;

        // Prepare order items
        var selectedProducts = products?.Where(p => selectedProductIds.Contains(p.Id)).ToList() ?? new List<Product>();
        var orderItems = selectedProducts.Select(p => new OrderItem
        {
            ProductId = p.Id,
            Count = 1 // You can add quantity selection if needed
        }).ToList();

        var order = new Order
        {
            UserId = Guid.Parse(userId),
            OrderItems = orderItems
        };

        try
        {
            var result = await ApiGatewayClient.CreateOrderAsync(order);

            if (result.Success == true)
            {
                isOrderSuccessModalOpen = true;
                selectedProductIdsMap = products?.ToDictionary(p => p.Id, p => false) ?? new();
            }
            else
            {
                orderErrorMessage = result.Message;
                isOrderErrorModalOpen = true;
            }
        }
        catch (Exception ex)
        {
            orderErrorMessage = ex.Message;
            isOrderErrorModalOpen = true;
        }
    }
}
